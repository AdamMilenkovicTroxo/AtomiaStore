@model Atomia.Store.AspNetMvc.Models.DefaultCheckoutViewModel
@using Atomia.Web.Plugin.Validation.HtmlHelpers;

@{
    Layout = "~/Themes/Default/Views/_OrderFlowLayout.cshtml";
}

<div class="settingsboxinner">
    <div data-bind="visible: Cart.IsEmpty()">
        <h4>@Html.CommonResource("CheckoutCartIsEmptyTitle")</h4>
        <p>@Html.CommonResource("CheckoutCartIsEmptyDescription")</p>
    </div>

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div data-bind="visible: !Cart.IsEmpty()">
            <h4>@Html.CommonResource("PaymentOptions")</h4>
            @Html.Partial("_PaymentMethods", Model.PaymentMethodGuiPlugins)

            <h4>@Html.CommonResource("AddCampaignCode")</h4>
            @Html.Partial("_Campaign")

            <h4>@Html.CommonResource("Invoice")</h4>
            @* @Html.Partial("_VatCheck") *@
            @Html.Partial("_CartSummary")

            @if (Model.TermsOfService.Count > 0)
            {
                <h4>@Html.CommonResource("Terms")</h4>
                @Html.Partial("_TermsOfServiceConfirmation", Model)
            }
        </div>

        @Html.Partial("_Actions")
    }
</div>

@section scripts {
    @{
        Html.EnableClientValidation();
    }

    <script type="text/javascript">
        Atomia.VM.Payment = Atomia.ViewModels.CreatePaymentSelectorModel();
        Atomia.VM.Payment.SelectedPaymentMethod('@Model.SelectedPaymentMethodId');

        Atomia.VM.PayWithInvoice = Atomia.ViewModels.CreatePayWithInvoiceModel(Atomia.VM.Cart, Atomia.VM.Payment);
        Atomia.VM.PayWithInvoice.LoadPostalFeeItem(@Html.JsonAction("GetItem", "ProductListing", new { articleNumber = "BIL-IF" }));
        Atomia.VM.PayWithInvoice.InvoiceType('email');

        Atomia.VM.Campaign = Atomia.ViewModels.CreateCampaignModel(Atomia.VM.Cart);
    </script>
}
